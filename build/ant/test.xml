<project name="test" default="test.fail">

    <description>test tasks</description>

	<target name="test.fail">
        <fail message="Do not execute this file directly.  Use build.xml from project root" />
    </target>

    <property name="test.src.dir" value="${basedir}/test" />
    <property name="test.root" value="${build.temp}/test" />
    <property name="test.class.root" value="${test.root}/classes" />
    <property name="junit.report.dir" value="${report.dir}/junit" />

    <target name="test.init" depends="ivy.init">
		<mkdir dir="${test.root}/jndi" />

		<copy file="${basedir}/build/test/jndi/jdbc.properties.template" tofile="${test.root}/jndi/jdbc.properties">
            <filterchain>
                <replacetokens>
                    <token key="database.host" value="${database.host}" />
                    <token key="database.port" value="${database.port}" />
                    <token key="database.name" value="${database.name}" />
                    <token key="database.username" value="${database.username}" />
        			<token key="database.password" value="${database.password}" />
                </replacetokens>
            </filterchain>
		</copy>

    	<taskdef resource="tasks.properties" classpathref="classpath.coverage"/>
    </target>

	<target name="test.compile" depends="test.init,dist.war">
		<delete dir="${test.class.root}" quiet="true"/>
		<mkdir dir="${test.class.root}" />

		<path id="classpath.test.compile">
			<pathelement path="${build.temp}/classes" />
			<path refid="classpath.test" />
			<path refid="classpath.compile" />
		</path>

		<javac srcdir="${test.src.dir}"
			destdir="${test.class.root}"
			classpathref="classpath.test.compile"
			deprecation="${show.deprecation}"
			debug="on"
			source="${javq.version}"
			target="${javq.version}"
			includeAntRuntime="off">
		</javac>

		<!-- log4j fix -->
		<copy todir="${test.class.root}">
			<fileset dir="${test.src.dir}">
				<include name="**/*.properties" />
			</fileset>
		</copy>

	</target>

	<target name="test.instrument" depends="test.init">
		<mkdir dir="${report.dir}/coverage/html" />
		<mkdir dir="${test.root}/webapps/${app.name}" />

		<cobertura-instrument
			ignoreTrivial="true"
			datafile="${report.dir}/coverage/cobertura.ser">

			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
				@see https://github.com/cobertura/cobertura/wiki/Ant-Task-Reference
			-->
			<ignore regex="org.apache.log4j.*" />

		    <fileset dir="${build.temp}/classes">
		        <include name="**/*.class" />
		        <exclude name="**/*.properties" />
		    </fileset>

    		<auxClasspath refid="classpath.compile" />
		</cobertura-instrument>

		<unzip src="${war.file}" dest="${test.root}/webapps/${app.name}"/>

		<jar destfile="${jar.file}">
			<fileset dir="${build.temp}/classes" />
		</jar>

		<copy overwrite="true" force="true" file="${jar.file}" todir="${test.root}/webapps/${app.name}/WEB-INF/lib"/>

	</target>

	<target name="test.junit" depends="database.reset,test.compile,test.instrument" description="runs unit tests">
		<mkdir dir="${junit.report.dir}/report" />
		<mkdir dir="${test.root}/webapps" />

		<path id="classpath.test.junit">
		    <fileset dir="${test.root}/webapps/${app.name}/WEB-INF/lib">
		        <include name="*.jar" />
		    </fileset>
			<pathelement location="${test.root}/webapps/${app.name}/WEB-INF/classes" />
			<path refid="classpath.test" />
			<path refid="classpath.coverage" />
			<pathelement location="${test.class.root}" />
		</path>

        <pathconvert property="junit.path">
            <path refid="classpath.test.junit" />
        </pathconvert>

		<!--
		<echo>${junit.path}</echo>
		-->

        <junit
			fork="true"
			forkmode="once"
			printsummary="true"
			haltonfailure="false"
			showoutput="${test.show.output}"
            tempdir="${java.io.tmpdir}"
			failureproperty="test.junit.fail">
            <classpath refid="classpath.test.junit"/>

			<!-- jndi configuration -->
			<jvmarg value="-Djava.naming.factory.initial=org.osjava.sj.SimpleContextFactory"/>
			<jvmarg value="-Dorg.osjava.sj.root=${test.root}/jndi"/>
            <jvmarg value="-Dorg.osjava.sj.delimiter=/"/>
            <!-- emulate tomcat jndi config -->
            <jvmarg value="-Dorg.osjava.sj.space=java:/comp/env"/>
			<!-- enforce file encoding for consistent testing -->
            <jvmarg value="-Dfile.encoding=UTF-8"/>
			<!-- coverage file -->
        	<jvmarg value="-Dnet.sourceforge.cobertura.datafile=${report.dir}/coverage/cobertura.ser"/>
			<!-- remote debugging hook -->
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=${test.debug.suspend},address=${test.debug.port}"/>

            <jvmarg value="-Dapp.root=dist/test/webapps/${app.name}"/>

			<!-- capture stdout and send to log file -->
            <formatter type="plain" usefile="true" extension=".log"/>
            <formatter type="xml" usefile="true"/>

			<!-- handle single test class and complete test suite -->
            <batchtest if="test.junit.target" todir="${junit.report.dir}">
                <fileset dir="${basedir}/test">
                    <include name="**/${test.junit.target}.java"/>
                </fileset>
            </batchtest>
            <batchtest unless="test.junit.target" todir="${junit.report.dir}">
                <fileset dir="${basedir}/test">
                    <include name="**/Test*.java"/>
                </fileset>
            </batchtest>
        </junit>

        <sleep seconds="5"/>

		<junitreport todir="${junit.report.dir}/report">
		  <fileset dir="${junit.report.dir}">
			<include name="TEST-*.xml"/>
		  </fileset>
		  <report format="frames" todir="${junit.report.dir}/report/html"/>
		</junitreport>

        <cobertura-report datafile="${report.dir}/coverage/cobertura.ser"
        	destdir="${report.dir}/coverage/html">
            <fileset dir="${basedir}/java">
                <include name="**/*.java" />
            </fileset>
        </cobertura-report>

    	<fail if="test.junit.fail" message="unit tests failed, see ${junit.report.dir}/report/html/index.html"/>
	</target>
</project>